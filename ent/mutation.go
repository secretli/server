// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/secretli/server/ent/predicate"
	"github.com/secretli/server/ent/secret"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeSecret = "Secret"
)

// SecretMutation represents an operation that mutates the Secret nodes in the graph.
type SecretMutation struct {
	config
	op              Op
	typ             string
	id              *int
	public_id       *string
	retrieval_token *string
	deletion_token  *string
	nonce           *string
	encrypted_data  *string
	expires_at      *time.Time
	burn_after_read *bool
	already_read    *bool
	clearedFields   map[string]struct{}
	done            bool
	oldValue        func(context.Context) (*Secret, error)
	predicates      []predicate.Secret
}

var _ ent.Mutation = (*SecretMutation)(nil)

// secretOption allows management of the mutation configuration using functional options.
type secretOption func(*SecretMutation)

// newSecretMutation creates new mutation for the Secret entity.
func newSecretMutation(c config, op Op, opts ...secretOption) *SecretMutation {
	m := &SecretMutation{
		config:        c,
		op:            op,
		typ:           TypeSecret,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSecretID sets the ID field of the mutation.
func withSecretID(id int) secretOption {
	return func(m *SecretMutation) {
		var (
			err   error
			once  sync.Once
			value *Secret
		)
		m.oldValue = func(ctx context.Context) (*Secret, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Secret.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSecret sets the old Secret of the mutation.
func withSecret(node *Secret) secretOption {
	return func(m *SecretMutation) {
		m.oldValue = func(context.Context) (*Secret, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SecretMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SecretMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SecretMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SecretMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Secret.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetPublicID sets the "public_id" field.
func (m *SecretMutation) SetPublicID(s string) {
	m.public_id = &s
}

// PublicID returns the value of the "public_id" field in the mutation.
func (m *SecretMutation) PublicID() (r string, exists bool) {
	v := m.public_id
	if v == nil {
		return
	}
	return *v, true
}

// OldPublicID returns the old "public_id" field's value of the Secret entity.
// If the Secret object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SecretMutation) OldPublicID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPublicID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPublicID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPublicID: %w", err)
	}
	return oldValue.PublicID, nil
}

// ResetPublicID resets all changes to the "public_id" field.
func (m *SecretMutation) ResetPublicID() {
	m.public_id = nil
}

// SetRetrievalToken sets the "retrieval_token" field.
func (m *SecretMutation) SetRetrievalToken(s string) {
	m.retrieval_token = &s
}

// RetrievalToken returns the value of the "retrieval_token" field in the mutation.
func (m *SecretMutation) RetrievalToken() (r string, exists bool) {
	v := m.retrieval_token
	if v == nil {
		return
	}
	return *v, true
}

// OldRetrievalToken returns the old "retrieval_token" field's value of the Secret entity.
// If the Secret object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SecretMutation) OldRetrievalToken(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRetrievalToken is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRetrievalToken requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRetrievalToken: %w", err)
	}
	return oldValue.RetrievalToken, nil
}

// ResetRetrievalToken resets all changes to the "retrieval_token" field.
func (m *SecretMutation) ResetRetrievalToken() {
	m.retrieval_token = nil
}

// SetDeletionToken sets the "deletion_token" field.
func (m *SecretMutation) SetDeletionToken(s string) {
	m.deletion_token = &s
}

// DeletionToken returns the value of the "deletion_token" field in the mutation.
func (m *SecretMutation) DeletionToken() (r string, exists bool) {
	v := m.deletion_token
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletionToken returns the old "deletion_token" field's value of the Secret entity.
// If the Secret object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SecretMutation) OldDeletionToken(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletionToken is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletionToken requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletionToken: %w", err)
	}
	return oldValue.DeletionToken, nil
}

// ResetDeletionToken resets all changes to the "deletion_token" field.
func (m *SecretMutation) ResetDeletionToken() {
	m.deletion_token = nil
}

// SetNonce sets the "nonce" field.
func (m *SecretMutation) SetNonce(s string) {
	m.nonce = &s
}

// Nonce returns the value of the "nonce" field in the mutation.
func (m *SecretMutation) Nonce() (r string, exists bool) {
	v := m.nonce
	if v == nil {
		return
	}
	return *v, true
}

// OldNonce returns the old "nonce" field's value of the Secret entity.
// If the Secret object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SecretMutation) OldNonce(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNonce is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNonce requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNonce: %w", err)
	}
	return oldValue.Nonce, nil
}

// ResetNonce resets all changes to the "nonce" field.
func (m *SecretMutation) ResetNonce() {
	m.nonce = nil
}

// SetEncryptedData sets the "encrypted_data" field.
func (m *SecretMutation) SetEncryptedData(s string) {
	m.encrypted_data = &s
}

// EncryptedData returns the value of the "encrypted_data" field in the mutation.
func (m *SecretMutation) EncryptedData() (r string, exists bool) {
	v := m.encrypted_data
	if v == nil {
		return
	}
	return *v, true
}

// OldEncryptedData returns the old "encrypted_data" field's value of the Secret entity.
// If the Secret object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SecretMutation) OldEncryptedData(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEncryptedData is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEncryptedData requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEncryptedData: %w", err)
	}
	return oldValue.EncryptedData, nil
}

// ResetEncryptedData resets all changes to the "encrypted_data" field.
func (m *SecretMutation) ResetEncryptedData() {
	m.encrypted_data = nil
}

// SetExpiresAt sets the "expires_at" field.
func (m *SecretMutation) SetExpiresAt(t time.Time) {
	m.expires_at = &t
}

// ExpiresAt returns the value of the "expires_at" field in the mutation.
func (m *SecretMutation) ExpiresAt() (r time.Time, exists bool) {
	v := m.expires_at
	if v == nil {
		return
	}
	return *v, true
}

// OldExpiresAt returns the old "expires_at" field's value of the Secret entity.
// If the Secret object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SecretMutation) OldExpiresAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExpiresAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExpiresAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExpiresAt: %w", err)
	}
	return oldValue.ExpiresAt, nil
}

// ResetExpiresAt resets all changes to the "expires_at" field.
func (m *SecretMutation) ResetExpiresAt() {
	m.expires_at = nil
}

// SetBurnAfterRead sets the "burn_after_read" field.
func (m *SecretMutation) SetBurnAfterRead(b bool) {
	m.burn_after_read = &b
}

// BurnAfterRead returns the value of the "burn_after_read" field in the mutation.
func (m *SecretMutation) BurnAfterRead() (r bool, exists bool) {
	v := m.burn_after_read
	if v == nil {
		return
	}
	return *v, true
}

// OldBurnAfterRead returns the old "burn_after_read" field's value of the Secret entity.
// If the Secret object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SecretMutation) OldBurnAfterRead(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBurnAfterRead is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBurnAfterRead requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBurnAfterRead: %w", err)
	}
	return oldValue.BurnAfterRead, nil
}

// ResetBurnAfterRead resets all changes to the "burn_after_read" field.
func (m *SecretMutation) ResetBurnAfterRead() {
	m.burn_after_read = nil
}

// SetAlreadyRead sets the "already_read" field.
func (m *SecretMutation) SetAlreadyRead(b bool) {
	m.already_read = &b
}

// AlreadyRead returns the value of the "already_read" field in the mutation.
func (m *SecretMutation) AlreadyRead() (r bool, exists bool) {
	v := m.already_read
	if v == nil {
		return
	}
	return *v, true
}

// OldAlreadyRead returns the old "already_read" field's value of the Secret entity.
// If the Secret object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SecretMutation) OldAlreadyRead(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAlreadyRead is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAlreadyRead requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAlreadyRead: %w", err)
	}
	return oldValue.AlreadyRead, nil
}

// ResetAlreadyRead resets all changes to the "already_read" field.
func (m *SecretMutation) ResetAlreadyRead() {
	m.already_read = nil
}

// Where appends a list predicates to the SecretMutation builder.
func (m *SecretMutation) Where(ps ...predicate.Secret) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SecretMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SecretMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Secret, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SecretMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SecretMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Secret).
func (m *SecretMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SecretMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.public_id != nil {
		fields = append(fields, secret.FieldPublicID)
	}
	if m.retrieval_token != nil {
		fields = append(fields, secret.FieldRetrievalToken)
	}
	if m.deletion_token != nil {
		fields = append(fields, secret.FieldDeletionToken)
	}
	if m.nonce != nil {
		fields = append(fields, secret.FieldNonce)
	}
	if m.encrypted_data != nil {
		fields = append(fields, secret.FieldEncryptedData)
	}
	if m.expires_at != nil {
		fields = append(fields, secret.FieldExpiresAt)
	}
	if m.burn_after_read != nil {
		fields = append(fields, secret.FieldBurnAfterRead)
	}
	if m.already_read != nil {
		fields = append(fields, secret.FieldAlreadyRead)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SecretMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case secret.FieldPublicID:
		return m.PublicID()
	case secret.FieldRetrievalToken:
		return m.RetrievalToken()
	case secret.FieldDeletionToken:
		return m.DeletionToken()
	case secret.FieldNonce:
		return m.Nonce()
	case secret.FieldEncryptedData:
		return m.EncryptedData()
	case secret.FieldExpiresAt:
		return m.ExpiresAt()
	case secret.FieldBurnAfterRead:
		return m.BurnAfterRead()
	case secret.FieldAlreadyRead:
		return m.AlreadyRead()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SecretMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case secret.FieldPublicID:
		return m.OldPublicID(ctx)
	case secret.FieldRetrievalToken:
		return m.OldRetrievalToken(ctx)
	case secret.FieldDeletionToken:
		return m.OldDeletionToken(ctx)
	case secret.FieldNonce:
		return m.OldNonce(ctx)
	case secret.FieldEncryptedData:
		return m.OldEncryptedData(ctx)
	case secret.FieldExpiresAt:
		return m.OldExpiresAt(ctx)
	case secret.FieldBurnAfterRead:
		return m.OldBurnAfterRead(ctx)
	case secret.FieldAlreadyRead:
		return m.OldAlreadyRead(ctx)
	}
	return nil, fmt.Errorf("unknown Secret field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SecretMutation) SetField(name string, value ent.Value) error {
	switch name {
	case secret.FieldPublicID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPublicID(v)
		return nil
	case secret.FieldRetrievalToken:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRetrievalToken(v)
		return nil
	case secret.FieldDeletionToken:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletionToken(v)
		return nil
	case secret.FieldNonce:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNonce(v)
		return nil
	case secret.FieldEncryptedData:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEncryptedData(v)
		return nil
	case secret.FieldExpiresAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExpiresAt(v)
		return nil
	case secret.FieldBurnAfterRead:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBurnAfterRead(v)
		return nil
	case secret.FieldAlreadyRead:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAlreadyRead(v)
		return nil
	}
	return fmt.Errorf("unknown Secret field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SecretMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SecretMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SecretMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Secret numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SecretMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SecretMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SecretMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Secret nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SecretMutation) ResetField(name string) error {
	switch name {
	case secret.FieldPublicID:
		m.ResetPublicID()
		return nil
	case secret.FieldRetrievalToken:
		m.ResetRetrievalToken()
		return nil
	case secret.FieldDeletionToken:
		m.ResetDeletionToken()
		return nil
	case secret.FieldNonce:
		m.ResetNonce()
		return nil
	case secret.FieldEncryptedData:
		m.ResetEncryptedData()
		return nil
	case secret.FieldExpiresAt:
		m.ResetExpiresAt()
		return nil
	case secret.FieldBurnAfterRead:
		m.ResetBurnAfterRead()
		return nil
	case secret.FieldAlreadyRead:
		m.ResetAlreadyRead()
		return nil
	}
	return fmt.Errorf("unknown Secret field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SecretMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SecretMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SecretMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SecretMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SecretMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SecretMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SecretMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Secret unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SecretMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Secret edge %s", name)
}
