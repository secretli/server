// Code generated by ent, DO NOT EDIT.

package secret

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the secret type in the database.
	Label = "secret"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldPublicID holds the string denoting the public_id field in the database.
	FieldPublicID = "public_id"
	// FieldRetrievalToken holds the string denoting the retrieval_token field in the database.
	FieldRetrievalToken = "retrieval_token"
	// FieldDeletionToken holds the string denoting the deletion_token field in the database.
	FieldDeletionToken = "deletion_token"
	// FieldNonce holds the string denoting the nonce field in the database.
	FieldNonce = "nonce"
	// FieldEncryptedData holds the string denoting the encrypted_data field in the database.
	FieldEncryptedData = "encrypted_data"
	// FieldExpiresAt holds the string denoting the expires_at field in the database.
	FieldExpiresAt = "expires_at"
	// FieldBurnAfterRead holds the string denoting the burn_after_read field in the database.
	FieldBurnAfterRead = "burn_after_read"
	// FieldAlreadyRead holds the string denoting the already_read field in the database.
	FieldAlreadyRead = "already_read"
	// Table holds the table name of the secret in the database.
	Table = "secrets"
)

// Columns holds all SQL columns for secret fields.
var Columns = []string{
	FieldID,
	FieldPublicID,
	FieldRetrievalToken,
	FieldDeletionToken,
	FieldNonce,
	FieldEncryptedData,
	FieldExpiresAt,
	FieldBurnAfterRead,
	FieldAlreadyRead,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Secret queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByPublicID orders the results by the public_id field.
func ByPublicID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPublicID, opts...).ToFunc()
}

// ByRetrievalToken orders the results by the retrieval_token field.
func ByRetrievalToken(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRetrievalToken, opts...).ToFunc()
}

// ByDeletionToken orders the results by the deletion_token field.
func ByDeletionToken(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletionToken, opts...).ToFunc()
}

// ByNonce orders the results by the nonce field.
func ByNonce(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNonce, opts...).ToFunc()
}

// ByEncryptedData orders the results by the encrypted_data field.
func ByEncryptedData(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEncryptedData, opts...).ToFunc()
}

// ByExpiresAt orders the results by the expires_at field.
func ByExpiresAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExpiresAt, opts...).ToFunc()
}

// ByBurnAfterRead orders the results by the burn_after_read field.
func ByBurnAfterRead(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBurnAfterRead, opts...).ToFunc()
}

// ByAlreadyRead orders the results by the already_read field.
func ByAlreadyRead(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAlreadyRead, opts...).ToFunc()
}
