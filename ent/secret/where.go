// Code generated by ent, DO NOT EDIT.

package secret

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/secretli/server/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Secret {
	return predicate.Secret(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Secret {
	return predicate.Secret(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Secret {
	return predicate.Secret(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Secret {
	return predicate.Secret(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Secret {
	return predicate.Secret(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Secret {
	return predicate.Secret(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Secret {
	return predicate.Secret(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Secret {
	return predicate.Secret(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Secret {
	return predicate.Secret(sql.FieldLTE(FieldID, id))
}

// PublicID applies equality check predicate on the "public_id" field. It's identical to PublicIDEQ.
func PublicID(v string) predicate.Secret {
	return predicate.Secret(sql.FieldEQ(FieldPublicID, v))
}

// RetrievalToken applies equality check predicate on the "retrieval_token" field. It's identical to RetrievalTokenEQ.
func RetrievalToken(v string) predicate.Secret {
	return predicate.Secret(sql.FieldEQ(FieldRetrievalToken, v))
}

// DeletionToken applies equality check predicate on the "deletion_token" field. It's identical to DeletionTokenEQ.
func DeletionToken(v string) predicate.Secret {
	return predicate.Secret(sql.FieldEQ(FieldDeletionToken, v))
}

// Nonce applies equality check predicate on the "nonce" field. It's identical to NonceEQ.
func Nonce(v string) predicate.Secret {
	return predicate.Secret(sql.FieldEQ(FieldNonce, v))
}

// EncryptedData applies equality check predicate on the "encrypted_data" field. It's identical to EncryptedDataEQ.
func EncryptedData(v string) predicate.Secret {
	return predicate.Secret(sql.FieldEQ(FieldEncryptedData, v))
}

// ExpiresAt applies equality check predicate on the "expires_at" field. It's identical to ExpiresAtEQ.
func ExpiresAt(v time.Time) predicate.Secret {
	return predicate.Secret(sql.FieldEQ(FieldExpiresAt, v))
}

// BurnAfterRead applies equality check predicate on the "burn_after_read" field. It's identical to BurnAfterReadEQ.
func BurnAfterRead(v bool) predicate.Secret {
	return predicate.Secret(sql.FieldEQ(FieldBurnAfterRead, v))
}

// AlreadyRead applies equality check predicate on the "already_read" field. It's identical to AlreadyReadEQ.
func AlreadyRead(v bool) predicate.Secret {
	return predicate.Secret(sql.FieldEQ(FieldAlreadyRead, v))
}

// PublicIDEQ applies the EQ predicate on the "public_id" field.
func PublicIDEQ(v string) predicate.Secret {
	return predicate.Secret(sql.FieldEQ(FieldPublicID, v))
}

// PublicIDNEQ applies the NEQ predicate on the "public_id" field.
func PublicIDNEQ(v string) predicate.Secret {
	return predicate.Secret(sql.FieldNEQ(FieldPublicID, v))
}

// PublicIDIn applies the In predicate on the "public_id" field.
func PublicIDIn(vs ...string) predicate.Secret {
	return predicate.Secret(sql.FieldIn(FieldPublicID, vs...))
}

// PublicIDNotIn applies the NotIn predicate on the "public_id" field.
func PublicIDNotIn(vs ...string) predicate.Secret {
	return predicate.Secret(sql.FieldNotIn(FieldPublicID, vs...))
}

// PublicIDGT applies the GT predicate on the "public_id" field.
func PublicIDGT(v string) predicate.Secret {
	return predicate.Secret(sql.FieldGT(FieldPublicID, v))
}

// PublicIDGTE applies the GTE predicate on the "public_id" field.
func PublicIDGTE(v string) predicate.Secret {
	return predicate.Secret(sql.FieldGTE(FieldPublicID, v))
}

// PublicIDLT applies the LT predicate on the "public_id" field.
func PublicIDLT(v string) predicate.Secret {
	return predicate.Secret(sql.FieldLT(FieldPublicID, v))
}

// PublicIDLTE applies the LTE predicate on the "public_id" field.
func PublicIDLTE(v string) predicate.Secret {
	return predicate.Secret(sql.FieldLTE(FieldPublicID, v))
}

// PublicIDContains applies the Contains predicate on the "public_id" field.
func PublicIDContains(v string) predicate.Secret {
	return predicate.Secret(sql.FieldContains(FieldPublicID, v))
}

// PublicIDHasPrefix applies the HasPrefix predicate on the "public_id" field.
func PublicIDHasPrefix(v string) predicate.Secret {
	return predicate.Secret(sql.FieldHasPrefix(FieldPublicID, v))
}

// PublicIDHasSuffix applies the HasSuffix predicate on the "public_id" field.
func PublicIDHasSuffix(v string) predicate.Secret {
	return predicate.Secret(sql.FieldHasSuffix(FieldPublicID, v))
}

// PublicIDEqualFold applies the EqualFold predicate on the "public_id" field.
func PublicIDEqualFold(v string) predicate.Secret {
	return predicate.Secret(sql.FieldEqualFold(FieldPublicID, v))
}

// PublicIDContainsFold applies the ContainsFold predicate on the "public_id" field.
func PublicIDContainsFold(v string) predicate.Secret {
	return predicate.Secret(sql.FieldContainsFold(FieldPublicID, v))
}

// RetrievalTokenEQ applies the EQ predicate on the "retrieval_token" field.
func RetrievalTokenEQ(v string) predicate.Secret {
	return predicate.Secret(sql.FieldEQ(FieldRetrievalToken, v))
}

// RetrievalTokenNEQ applies the NEQ predicate on the "retrieval_token" field.
func RetrievalTokenNEQ(v string) predicate.Secret {
	return predicate.Secret(sql.FieldNEQ(FieldRetrievalToken, v))
}

// RetrievalTokenIn applies the In predicate on the "retrieval_token" field.
func RetrievalTokenIn(vs ...string) predicate.Secret {
	return predicate.Secret(sql.FieldIn(FieldRetrievalToken, vs...))
}

// RetrievalTokenNotIn applies the NotIn predicate on the "retrieval_token" field.
func RetrievalTokenNotIn(vs ...string) predicate.Secret {
	return predicate.Secret(sql.FieldNotIn(FieldRetrievalToken, vs...))
}

// RetrievalTokenGT applies the GT predicate on the "retrieval_token" field.
func RetrievalTokenGT(v string) predicate.Secret {
	return predicate.Secret(sql.FieldGT(FieldRetrievalToken, v))
}

// RetrievalTokenGTE applies the GTE predicate on the "retrieval_token" field.
func RetrievalTokenGTE(v string) predicate.Secret {
	return predicate.Secret(sql.FieldGTE(FieldRetrievalToken, v))
}

// RetrievalTokenLT applies the LT predicate on the "retrieval_token" field.
func RetrievalTokenLT(v string) predicate.Secret {
	return predicate.Secret(sql.FieldLT(FieldRetrievalToken, v))
}

// RetrievalTokenLTE applies the LTE predicate on the "retrieval_token" field.
func RetrievalTokenLTE(v string) predicate.Secret {
	return predicate.Secret(sql.FieldLTE(FieldRetrievalToken, v))
}

// RetrievalTokenContains applies the Contains predicate on the "retrieval_token" field.
func RetrievalTokenContains(v string) predicate.Secret {
	return predicate.Secret(sql.FieldContains(FieldRetrievalToken, v))
}

// RetrievalTokenHasPrefix applies the HasPrefix predicate on the "retrieval_token" field.
func RetrievalTokenHasPrefix(v string) predicate.Secret {
	return predicate.Secret(sql.FieldHasPrefix(FieldRetrievalToken, v))
}

// RetrievalTokenHasSuffix applies the HasSuffix predicate on the "retrieval_token" field.
func RetrievalTokenHasSuffix(v string) predicate.Secret {
	return predicate.Secret(sql.FieldHasSuffix(FieldRetrievalToken, v))
}

// RetrievalTokenEqualFold applies the EqualFold predicate on the "retrieval_token" field.
func RetrievalTokenEqualFold(v string) predicate.Secret {
	return predicate.Secret(sql.FieldEqualFold(FieldRetrievalToken, v))
}

// RetrievalTokenContainsFold applies the ContainsFold predicate on the "retrieval_token" field.
func RetrievalTokenContainsFold(v string) predicate.Secret {
	return predicate.Secret(sql.FieldContainsFold(FieldRetrievalToken, v))
}

// DeletionTokenEQ applies the EQ predicate on the "deletion_token" field.
func DeletionTokenEQ(v string) predicate.Secret {
	return predicate.Secret(sql.FieldEQ(FieldDeletionToken, v))
}

// DeletionTokenNEQ applies the NEQ predicate on the "deletion_token" field.
func DeletionTokenNEQ(v string) predicate.Secret {
	return predicate.Secret(sql.FieldNEQ(FieldDeletionToken, v))
}

// DeletionTokenIn applies the In predicate on the "deletion_token" field.
func DeletionTokenIn(vs ...string) predicate.Secret {
	return predicate.Secret(sql.FieldIn(FieldDeletionToken, vs...))
}

// DeletionTokenNotIn applies the NotIn predicate on the "deletion_token" field.
func DeletionTokenNotIn(vs ...string) predicate.Secret {
	return predicate.Secret(sql.FieldNotIn(FieldDeletionToken, vs...))
}

// DeletionTokenGT applies the GT predicate on the "deletion_token" field.
func DeletionTokenGT(v string) predicate.Secret {
	return predicate.Secret(sql.FieldGT(FieldDeletionToken, v))
}

// DeletionTokenGTE applies the GTE predicate on the "deletion_token" field.
func DeletionTokenGTE(v string) predicate.Secret {
	return predicate.Secret(sql.FieldGTE(FieldDeletionToken, v))
}

// DeletionTokenLT applies the LT predicate on the "deletion_token" field.
func DeletionTokenLT(v string) predicate.Secret {
	return predicate.Secret(sql.FieldLT(FieldDeletionToken, v))
}

// DeletionTokenLTE applies the LTE predicate on the "deletion_token" field.
func DeletionTokenLTE(v string) predicate.Secret {
	return predicate.Secret(sql.FieldLTE(FieldDeletionToken, v))
}

// DeletionTokenContains applies the Contains predicate on the "deletion_token" field.
func DeletionTokenContains(v string) predicate.Secret {
	return predicate.Secret(sql.FieldContains(FieldDeletionToken, v))
}

// DeletionTokenHasPrefix applies the HasPrefix predicate on the "deletion_token" field.
func DeletionTokenHasPrefix(v string) predicate.Secret {
	return predicate.Secret(sql.FieldHasPrefix(FieldDeletionToken, v))
}

// DeletionTokenHasSuffix applies the HasSuffix predicate on the "deletion_token" field.
func DeletionTokenHasSuffix(v string) predicate.Secret {
	return predicate.Secret(sql.FieldHasSuffix(FieldDeletionToken, v))
}

// DeletionTokenEqualFold applies the EqualFold predicate on the "deletion_token" field.
func DeletionTokenEqualFold(v string) predicate.Secret {
	return predicate.Secret(sql.FieldEqualFold(FieldDeletionToken, v))
}

// DeletionTokenContainsFold applies the ContainsFold predicate on the "deletion_token" field.
func DeletionTokenContainsFold(v string) predicate.Secret {
	return predicate.Secret(sql.FieldContainsFold(FieldDeletionToken, v))
}

// NonceEQ applies the EQ predicate on the "nonce" field.
func NonceEQ(v string) predicate.Secret {
	return predicate.Secret(sql.FieldEQ(FieldNonce, v))
}

// NonceNEQ applies the NEQ predicate on the "nonce" field.
func NonceNEQ(v string) predicate.Secret {
	return predicate.Secret(sql.FieldNEQ(FieldNonce, v))
}

// NonceIn applies the In predicate on the "nonce" field.
func NonceIn(vs ...string) predicate.Secret {
	return predicate.Secret(sql.FieldIn(FieldNonce, vs...))
}

// NonceNotIn applies the NotIn predicate on the "nonce" field.
func NonceNotIn(vs ...string) predicate.Secret {
	return predicate.Secret(sql.FieldNotIn(FieldNonce, vs...))
}

// NonceGT applies the GT predicate on the "nonce" field.
func NonceGT(v string) predicate.Secret {
	return predicate.Secret(sql.FieldGT(FieldNonce, v))
}

// NonceGTE applies the GTE predicate on the "nonce" field.
func NonceGTE(v string) predicate.Secret {
	return predicate.Secret(sql.FieldGTE(FieldNonce, v))
}

// NonceLT applies the LT predicate on the "nonce" field.
func NonceLT(v string) predicate.Secret {
	return predicate.Secret(sql.FieldLT(FieldNonce, v))
}

// NonceLTE applies the LTE predicate on the "nonce" field.
func NonceLTE(v string) predicate.Secret {
	return predicate.Secret(sql.FieldLTE(FieldNonce, v))
}

// NonceContains applies the Contains predicate on the "nonce" field.
func NonceContains(v string) predicate.Secret {
	return predicate.Secret(sql.FieldContains(FieldNonce, v))
}

// NonceHasPrefix applies the HasPrefix predicate on the "nonce" field.
func NonceHasPrefix(v string) predicate.Secret {
	return predicate.Secret(sql.FieldHasPrefix(FieldNonce, v))
}

// NonceHasSuffix applies the HasSuffix predicate on the "nonce" field.
func NonceHasSuffix(v string) predicate.Secret {
	return predicate.Secret(sql.FieldHasSuffix(FieldNonce, v))
}

// NonceEqualFold applies the EqualFold predicate on the "nonce" field.
func NonceEqualFold(v string) predicate.Secret {
	return predicate.Secret(sql.FieldEqualFold(FieldNonce, v))
}

// NonceContainsFold applies the ContainsFold predicate on the "nonce" field.
func NonceContainsFold(v string) predicate.Secret {
	return predicate.Secret(sql.FieldContainsFold(FieldNonce, v))
}

// EncryptedDataEQ applies the EQ predicate on the "encrypted_data" field.
func EncryptedDataEQ(v string) predicate.Secret {
	return predicate.Secret(sql.FieldEQ(FieldEncryptedData, v))
}

// EncryptedDataNEQ applies the NEQ predicate on the "encrypted_data" field.
func EncryptedDataNEQ(v string) predicate.Secret {
	return predicate.Secret(sql.FieldNEQ(FieldEncryptedData, v))
}

// EncryptedDataIn applies the In predicate on the "encrypted_data" field.
func EncryptedDataIn(vs ...string) predicate.Secret {
	return predicate.Secret(sql.FieldIn(FieldEncryptedData, vs...))
}

// EncryptedDataNotIn applies the NotIn predicate on the "encrypted_data" field.
func EncryptedDataNotIn(vs ...string) predicate.Secret {
	return predicate.Secret(sql.FieldNotIn(FieldEncryptedData, vs...))
}

// EncryptedDataGT applies the GT predicate on the "encrypted_data" field.
func EncryptedDataGT(v string) predicate.Secret {
	return predicate.Secret(sql.FieldGT(FieldEncryptedData, v))
}

// EncryptedDataGTE applies the GTE predicate on the "encrypted_data" field.
func EncryptedDataGTE(v string) predicate.Secret {
	return predicate.Secret(sql.FieldGTE(FieldEncryptedData, v))
}

// EncryptedDataLT applies the LT predicate on the "encrypted_data" field.
func EncryptedDataLT(v string) predicate.Secret {
	return predicate.Secret(sql.FieldLT(FieldEncryptedData, v))
}

// EncryptedDataLTE applies the LTE predicate on the "encrypted_data" field.
func EncryptedDataLTE(v string) predicate.Secret {
	return predicate.Secret(sql.FieldLTE(FieldEncryptedData, v))
}

// EncryptedDataContains applies the Contains predicate on the "encrypted_data" field.
func EncryptedDataContains(v string) predicate.Secret {
	return predicate.Secret(sql.FieldContains(FieldEncryptedData, v))
}

// EncryptedDataHasPrefix applies the HasPrefix predicate on the "encrypted_data" field.
func EncryptedDataHasPrefix(v string) predicate.Secret {
	return predicate.Secret(sql.FieldHasPrefix(FieldEncryptedData, v))
}

// EncryptedDataHasSuffix applies the HasSuffix predicate on the "encrypted_data" field.
func EncryptedDataHasSuffix(v string) predicate.Secret {
	return predicate.Secret(sql.FieldHasSuffix(FieldEncryptedData, v))
}

// EncryptedDataEqualFold applies the EqualFold predicate on the "encrypted_data" field.
func EncryptedDataEqualFold(v string) predicate.Secret {
	return predicate.Secret(sql.FieldEqualFold(FieldEncryptedData, v))
}

// EncryptedDataContainsFold applies the ContainsFold predicate on the "encrypted_data" field.
func EncryptedDataContainsFold(v string) predicate.Secret {
	return predicate.Secret(sql.FieldContainsFold(FieldEncryptedData, v))
}

// ExpiresAtEQ applies the EQ predicate on the "expires_at" field.
func ExpiresAtEQ(v time.Time) predicate.Secret {
	return predicate.Secret(sql.FieldEQ(FieldExpiresAt, v))
}

// ExpiresAtNEQ applies the NEQ predicate on the "expires_at" field.
func ExpiresAtNEQ(v time.Time) predicate.Secret {
	return predicate.Secret(sql.FieldNEQ(FieldExpiresAt, v))
}

// ExpiresAtIn applies the In predicate on the "expires_at" field.
func ExpiresAtIn(vs ...time.Time) predicate.Secret {
	return predicate.Secret(sql.FieldIn(FieldExpiresAt, vs...))
}

// ExpiresAtNotIn applies the NotIn predicate on the "expires_at" field.
func ExpiresAtNotIn(vs ...time.Time) predicate.Secret {
	return predicate.Secret(sql.FieldNotIn(FieldExpiresAt, vs...))
}

// ExpiresAtGT applies the GT predicate on the "expires_at" field.
func ExpiresAtGT(v time.Time) predicate.Secret {
	return predicate.Secret(sql.FieldGT(FieldExpiresAt, v))
}

// ExpiresAtGTE applies the GTE predicate on the "expires_at" field.
func ExpiresAtGTE(v time.Time) predicate.Secret {
	return predicate.Secret(sql.FieldGTE(FieldExpiresAt, v))
}

// ExpiresAtLT applies the LT predicate on the "expires_at" field.
func ExpiresAtLT(v time.Time) predicate.Secret {
	return predicate.Secret(sql.FieldLT(FieldExpiresAt, v))
}

// ExpiresAtLTE applies the LTE predicate on the "expires_at" field.
func ExpiresAtLTE(v time.Time) predicate.Secret {
	return predicate.Secret(sql.FieldLTE(FieldExpiresAt, v))
}

// BurnAfterReadEQ applies the EQ predicate on the "burn_after_read" field.
func BurnAfterReadEQ(v bool) predicate.Secret {
	return predicate.Secret(sql.FieldEQ(FieldBurnAfterRead, v))
}

// BurnAfterReadNEQ applies the NEQ predicate on the "burn_after_read" field.
func BurnAfterReadNEQ(v bool) predicate.Secret {
	return predicate.Secret(sql.FieldNEQ(FieldBurnAfterRead, v))
}

// AlreadyReadEQ applies the EQ predicate on the "already_read" field.
func AlreadyReadEQ(v bool) predicate.Secret {
	return predicate.Secret(sql.FieldEQ(FieldAlreadyRead, v))
}

// AlreadyReadNEQ applies the NEQ predicate on the "already_read" field.
func AlreadyReadNEQ(v bool) predicate.Secret {
	return predicate.Secret(sql.FieldNEQ(FieldAlreadyRead, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Secret) predicate.Secret {
	return predicate.Secret(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Secret) predicate.Secret {
	return predicate.Secret(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Secret) predicate.Secret {
	return predicate.Secret(func(s *sql.Selector) {
		p(s.Not())
	})
}
